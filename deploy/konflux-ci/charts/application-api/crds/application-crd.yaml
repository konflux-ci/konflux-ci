apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: applications.appstudio.redhat.com
spec:
  group: appstudio.redhat.com
  names:
    kind: Application
    listKind: ApplicationList
    plural: applications
    shortNames:
    - hasapp
    - ha
    - app
    singular: application
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[-1].status
      name: Status
      type: string
    - jsonPath: .status.conditions[-1].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Application is the Schema for the applications API.  For a detailed
          description with examples, refer to <a href="https://github.com/redhat-appstudio/book/blob/main/book/HAS/hybrid-application-service-api.md">
          Hybrid Application Service Kube API </a>
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ApplicationSpec defines the desired state of Application
            properties:
              appModelRepository:
                description: AppModelRepository refers to the git repository that
                  will store the application model (a devfile) Can be the same as
                  GitOps repository. A repository will be generated if this field
                  is left blank. Optional.
                properties:
                  branch:
                    description: 'Branch corresponds to the branch in the repository
                      that should be used Example: devel. Optional.'
                    type: string
                  context:
                    description: 'Context corresponds to the context within the repository
                      that should be used Example: folderA/folderB/gitops. Optional.'
                    type: string
                  url:
                    description: 'URL refers to the repository URL that should be
                      used. If not specified, a GitOps repository under the $GITHUB_ORG
                      (defaults to redhat-appstudio-appdata) organization on GitHub
                      will be generated by HAS. Example: https://github.com/devfile-test/myrepo.
                      Required.'
                    type: string
                required:
                - url
                type: object
              description:
                description: Description refers to a brief description of the application.
                  Optional.
                type: string
              displayName:
                description: DisplayName refers to the name that an application will
                  be deployed with in App Studio. Required.
                type: string
              gitOpsRepository:
                description: GitOpsRepository refers to the git repository that will
                  store the gitops resources. Can be the same as App Model Repository.
                  A repository will be generated if this field is left blank. Optional.
                properties:
                  branch:
                    description: 'Branch corresponds to the branch in the repository
                      that should be used Example: devel. Optional.'
                    type: string
                  context:
                    description: 'Context corresponds to the context within the repository
                      that should be used Example: folderA/folderB/gitops. Optional.'
                    type: string
                  url:
                    description: 'URL refers to the repository URL that should be
                      used. If not specified, a GitOps repository under the $GITHUB_ORG
                      (defaults to redhat-appstudio-appdata) organization on GitHub
                      will be generated by HAS. Example: https://github.com/devfile-test/myrepo.
                      Required.'
                    type: string
                required:
                - url
                type: object
            required:
            - displayName
            type: object
          status:
            description: ApplicationStatus defines the observed state of Application
            properties:
              conditions:
                description: Conditions is an array of the Application's status conditions
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{ // Represents the observations of a foo's
                    current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              devfile:
                description: Devfile corresponds to the devfile representation of
                  the Application resource
                type: string
            required:
            - conditions
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
